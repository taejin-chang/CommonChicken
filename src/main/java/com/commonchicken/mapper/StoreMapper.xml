<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
STO_NUM          NOT NULL VARCHAR2(50)   
MEM_EMAIL        NOT NULL VARCHAR2(50)   
STO_CODE         NOT NULL VARCHAR2(50)   
STO_NAME         NOT NULL VARCHAR2(50)   
STO_CEO          NOT NULL VARCHAR2(50)   
STO_CONDITION    NOT NULL VARCHAR2(50)   
STO_SECTOR       NOT NULL VARCHAR2(50)   
STO_ZIP_CODE     NOT NULL VARCHAR2(50)   
STO_ADD1         NOT NULL VARCHAR2(50)   
STO_ADD2         NOT NULL VARCHAR2(50)   
STO_PHONE        NOT NULL VARCHAR2(50)   
STO_STATUS       NOT NULL NUMBER(1)      
STO_OPENNING     NOT NULL VARCHAR2(50)   
STO_MINORDER     NOT NULL VARCHAR2(50)   
STO_PAYMENT      NOT NULL VARCHAR2(50)   
STO_BONE_ORG     NOT NULL VARCHAR2(50)   
STO_BONELESS_ORG NOT NULL VARCHAR2(50)   
STO_MESSAGE      NOT NULL VARCHAR2(1000) 
STO_ORIGIN                VARCHAR2(100)  
STO_UPLOAD                VARCHAR2(100)
	private String stoNum;
	private String memEmail;
	private String stoCode;
	private String stoName;
	private String stoCeo;
	private String stoCondition;
	private String stoSector;
	private String stoZipCode;
	private String stoAdd1;
	private String stoAdd2;
	private String stoPhone;
	private int stoStatus;
	private String stoOpenning;
	private String stoMinorder;
	private String stoPayment;
	private String stoBoneOrg;
	private String stoBonelessOrg;
	private String stoMessage;
	private String stoOrigin;
	private String stoUpload;
	private MultipartFile file;  
 -->

<mapper namespace="com.commonchicken.mapper.StoreMapper">

	<resultMap type="CommonStoreVO" id="CommonStoreResultMap">
		<id column="cm_num" property="cmNum"/>
		<result column="cm_delivery_time" property="cmDeliveryTime"/>
		<result column="cm_close" property="cmClose"/>
		<result column="rev_rated_avg" property="revRatedAvg"/>
		<result column="rev_rated_count" property="revRatedCount"/>
		<association property="storeDTO" javaType="StoreDTO">
			<id column="sto_num" property="stoNum"/>
			<result column="sto_name" property="stoName"/>
			<result column="sto_add1" property="stoAdd1"/>
			<result column="sto_add2" property="stoAdd2"/>
			<result column="sto_phone" property="stoPhone"/>
			<result column="sto_openning" property="stoOpenning"/>
			<result column="sto_minorder" property="stoMinorder"/>
			<result column="sto_payment" property="stoPayment"/>
			<result column="sto_bone_org" property="stoBoneOrg"/>
			<result column="sto_boneless_org" property="stoBonelessOrg"/>
			<result column="sto_message" property="stoMessage"/>
			<result column="sto_upload" property="stoUpload"/>
		</association>
		<association property="reviewDTO" javaType="ReviewDTO">
			<id column="rev_num" property="revNum"/>
			<result column="mem_email" property="memEmail"/>
			<result column="rev_content" property="revContent"/>
			<result column="rev_rated" property="revRated"/>
			<result column="rev_date" property="revDate"/>
			<result column="rev_upload" property="revUpload"/>
		</association>
		<association property="memberDTO" javaType="MemberDTO">
			<id column="mem_nickname" property="memNickname"/>
			<result column="mem_upload" property="memUpload"/>
		</association>
		<collection property="productlist" ofType="ProductDTO">
			<id column="prd_code" property="prdCode"/>
			<result column="prd_name" property="prdName"/>	
			<result column="prd_price" property="prdPrice"/>	
			<result column="prd_category" property="prdCategory"/>	
			<result column="prd_upload" property="prdUpload"/>
		</collection>
	</resultMap>

	<select id="selectCommonStore" parameterType="map" resultMap="CommonStoreResultMap">
	<![CDATA[
	select c.cm_num,cm_delivery_time,cm_close,s.sto_num,sto_name,sto_add1,sto_add2,sto_phone,
	sto_openning,sto_minorder,sto_payment,sto_bone_org,sto_boneless_org,sto_message,sto_upload,
	p.prd_code,prd_name,prd_price,prd_category,prd_upload, r.rev_rated_avg, r.rev_rated_count, rr.rev_num,rr.mem_email,
	rr.rev_content,rr.rev_rated,rr.rev_date,rr.rev_upload,m.mem_nickname,m.mem_upload
	from (store_tb s left join common_tb c on s.sto_num =c.sto_num
	left join product_tb p on s.sto_num =p.sto_num 
	left join 
	(select cm_num,round(avg(rev_rated),1) rev_rated_avg, count(rev_rated) rev_rated_count from review_tb group by cm_num) r on c.cm_num =r.cm_num
	left join review_tb rr on r.cm_num = rr.cm_num
	left join member_tb m on rr.mem_email =m.mem_email)
	where c.cm_num = #{cmNum} and s.sto_num = #{stoNum}
	]]>
	</select>
	
	<select id="selectStoreCommonlist" resultMap="CommonStoreResultMap">
	<![CDATA[
	select s.sto_num, c.cm_num, cm_delivery_time,cm_close from 
	store_tb s left join common_tb c on s.sto_num = c.sto_num where s.sto_num = #{stoNum}
	and substr(c.cm_delivery_time,0,10) = TO_DATE('2022-04-01','YYYY-MM-DD') order by c.cm_delivery_time
	]]>
	</select>
	
	<select id="selectStoreInfo" parameterType="map" resultMap="CommonStoreResultMap">
	select s.sto_num, c.cm_num, sto_name,sto_add1,sto_add2,sto_phone, sto_openning, sto_minorder, r.rev_rated_avg, r.rev_rated_count, c.cm_delivery_time, c.cm_close from
	store_tb s join common_tb c on s.sto_num = c.sto_num
	join (select cm_num,round(avg(rev_rated),1) rev_rated_avg, count(rev_rated) rev_rated_count from review_tb group by cm_num) r on c.cm_num = r.cm_num 
	where s.sto_num = #{stoNum} and c.cm_num = #{cmNum}
	</select>
	
	<select id="selectStoreInfoReivewAvg" parameterType="map" resultMap="CommonStoreResultMap">
	select r.sto_num, sto_name,sto_add1,sto_add2,sto_phone, sto_openning, sto_minorder, rev_rated from
	store_tb s join common_tb c on s.sto_num = c.sto_num join (select cc.sto_num, round(avg(rev_rated),1) rev_rated 
	from review_tb rv join common_tb cc on rv.cm_num = cc.cm_num group by cc.sto_num) r 
	on c.sto_num = r.sto_num 
	where s.sto_num = #{stoNum} group by r.sto_num, sto_name,sto_add1,sto_add2,sto_phone, sto_openning, sto_minorder, r.rev_rated
	</select>
	
	<select id="selectStoreInfoReivewCount" parameterType="map" resultMap="CommonStoreResultMap">
	select r.sto_num, sto_name,sto_add1,sto_add2,sto_phone, sto_openning, sto_minorder, rev_rated from
	store_tb s join common_tb c on s.sto_num = c.sto_num join (select cc.sto_num, count(rev_rated) rev_rated 
	from review_tb rv join common_tb cc on rv.cm_num = cc.cm_num group by cc.sto_num) r 
	on c.sto_num = r.sto_num 
	where s.sto_num = #{stoNum} group by r.sto_num, sto_name,sto_add1,sto_add2,sto_phone, sto_openning, sto_minorder, r.rev_rated
	</select>
	
	<select id="selectStoreProductInfo" resultMap="CommonStoreResultMap">
	select s.sto_num, p.prd_code,prd_name,prd_price,prd_category,prd_upload from store_tb s left join product_tb p on s.sto_num = p.sto_num
	where s.sto_num = #{stoNum}
	</select>
	
	<insert id="insertStore">
      <selectKey resultType="int" keyProperty="stoCode" order="BEFORE">
         select store_seq.nextval from dual
      </selectKey>
      insert into store_tb (sto_num, mem_email, sto_code, sto_name, sto_ceo, sto_condition, sto_sector, sto_zip_code, sto_add1,
       sto_add2, sto_phone, sto_status, sto_openning, sto_minorder, sto_payment, sto_bone_org, sto_boneless_org, sto_message, sto_origin, sto_upload)
      values (#{stoNum}, #{memEmail}, #{stoCode}, #{stoName}, #{stoCeo}, #{stoCondition}, #{stoSector}, #{stoZipCode}, #{stoAdd1},
       #{stoAdd2}, #{stoPhone},0, #{stoOpenning}, #{stoMinorder}, #{stoPayment}, #{stoBoneOrg}, #{stoBonelessOrg}, #{stoMessage}, #{stoOrigin}, #{stoUpload})
   </insert>
	
	<update id="updateStore">
		update store_tb set sto_name=#{stoName}, sto_ceo=#{stoCeo},
		 sto_condition=#{stoCondition}, sto_sector=#{stoSector}, sto_zip_code=#{stoZipCode}, sto_add1=#{stoAdd1}, sto_add2=#{stoAdd2},
		 sto_phone=#{stoPhone}, sto_status=#{stoStatus}, sto_openning=#{stoOpenning}, sto_minorder=#{stoMinorder}, sto_payment=#{stoPayment},
		 sto_bone_org=#{stoBoneOrg}, sto_boneless_org=#{stoBonelessOrg}, sto_message=#{stoMessage}, sto_origin=#{stoOrigin}, sto_upload=#{stoUpload} where sto_num=#{stoNum}
	</update>
	
	
	<select id="selectStore" resultType="StoreDTO">
		select * from store_tb where sto_num=#{stoNum}
	</select>
	<select id="selectStore1" resultType="StoreDTO">
		select * from store_tb where sto_num=#{stoNum}
	</select>
	
	<select id="selectStoreList" resultType="StoreDTO">
        select * from(select rownum rn, store.* from(select * from store_tb 
		where sto_status!=9 order by sto_num)store) where rn between #{startRow} and #{endRow}	
		</select>
	
	<select id="selectStoreEmail" resultType="String">
		select sto_num from store_tb where mem_email=#{memEmail}
	</select>
	
	<update id="deleteStore">
		update store_tb set sto_status=9 where sto_num = #{stoNum}
	</update>
	
	<select id="getStoreCount" resultType="int">
		select count(*) from store_tb where sto_status !=9
	</select>
	
	<update id="updateStoStatus" parameterType="map">
		update store_tb set sto_status = #{stoStatus} where sto_num = #{stoNum}
	</update>
	
	<select id="getBestStore" resultType="map">
		<![CDATA[
		select sto_name, sum_value from store_tb a join (select sto_num, sum_value from(select sto_num, sum(cm_sales) sum_value 
		from common_tb group by sto_num order by sum_value desc) where rownum <=4) b on a.sto_num = b.sto_num order by sum_value desc 
		]]>
	</select>

</mapper>